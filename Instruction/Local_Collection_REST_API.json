{
	"info": {
		"_postman_id": "17b23668-f286-4fe5-bbbe-0820b1ca9afe",
		"name": "Local Conduit Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21923209"
	},
	"item": [
		{
			"name": "Registration",
			"item": [
				{
					"name": "User registration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests)();\r",
									"\r",
									"pm.test(\"test all responce key\", function () {\r",
									"    pm.response.to.have.jsonBody('user.id')\r",
									"    .and.to.have.jsonBody('user.username')\r",
									"    .and.to.have.jsonBody('user.email')\r",
									"    .and.to.have.jsonBody('user.bio')\r",
									"    .and.to.have.jsonBody('user.image')\r",
									"    .and.to.have.jsonBody('user.token')\r",
									"});\r",
									"\r",
									"pm.test(\"Username exists\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.user.username).to.eql(pm.environment.get('localUser'));\r",
									"});\r",
									"\r",
									"pm.test(\"Email exists\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.user.email).to.eql(pm.environment.get('localEmail'));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{localEmail}}\",\r\n    \"password\": \"{{passwordConduitLocal}}\",\r\n    \"username\": \"{{localUser}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}users",
							"host": [
								"{{url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Username field is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();\r",
									"\r",
									"pm.test(\"test all responce key\", function () {\r",
									"    pm.response.to.have.jsonBody('errors.body[0]')\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{localEmail}}\",\r\n    \"password\": \"{{passwordConduitLocal}}\",\r\n    \"username\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}users",
							"host": [
								"{{url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Email field is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();\r",
									"\r",
									"pm.test(\"test all responce key\", function () {\r",
									"    pm.response.to.have.jsonBody('errors.body[0]')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"{{passwordConduitLocal}}\",\r\n    \"username\": \"{{localUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}users",
							"host": [
								"{{url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Password field is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();\r",
									"\r",
									"pm.test(\"test all responce key\", function () {\r",
									"    pm.response.to.have.jsonBody('errors.body[0]')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{localEmail}}\",\r\n    \"password\": \"\",\r\n    \"username\": \"{{localUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}users",
							"host": [
								"{{url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Email is already taken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();\r",
									"\r",
									"pm.test(\"test all responce key\", function () {\r",
									"    pm.response.to.have.jsonBody('errors.body[0]')\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"eval(environment.registration)();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{localEmail}}\",\r\n    \"password\": \"{{passwordConduitLocal}}\",\r\n    \"username\": \"{{localUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}users",
							"host": [
								"{{url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Username field is too long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{localEmail}}\",\r\n    \"password\": \"{{passwordConduitLocal}}\",\r\n    \"username\": \"{{longTextRegistration}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}users",
							"host": [
								"{{url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{invalidEmail}}\",\r\n    \"password\": \"{{passwordConduitLocal}}\",\r\n    \"username\": \"{{localUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}users",
							"host": [
								"{{url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Special symbols in the username field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{$randomLoremText}}\",\r\n    \"password\": \"{{passwordConduitLocal}}\",\r\n    \"username\": \"{{SpecialSymbols}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}users",
							"host": [
								"{{url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Password field is too short",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();\r",
									"\r",
									"pm.test(\"test all responce key\", function () {\r",
									"    pm.response.to.have.jsonBody('errors.body[0]')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{localEmail}}\",\r\n    \"password\": \"{{ShortPassword}}\",\r\n    \"username\": \"{{localUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}users",
							"host": [
								"{{url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Username field with spaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();\r",
									"\r",
									"pm.test(\"test all responce key\", function () {\r",
									"    pm.response.to.have.jsonBody('user.id')\r",
									"    .and.to.have.jsonBody('user.username')\r",
									"    .and.to.have.jsonBody('user.email')\r",
									"    .and.to.have.jsonBody('user.bio')\r",
									"    .and.to.have.jsonBody('user.image')\r",
									"    .and.to.have.jsonBody('user.token')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{localEmail}}\",\r\n    \"password\": \"{{passwordConduitLocal}}\",\r\n    \"username\": \"    \"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}users",
							"host": [
								"{{url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Username field with Cyrillic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();\r",
									"\r",
									"pm.test(\"test all responce key\", function () {\r",
									"    pm.response.to.have.jsonBody('user.id')\r",
									"    .and.to.have.jsonBody('user.username')\r",
									"    .and.to.have.jsonBody('user.email')\r",
									"    .and.to.have.jsonBody('user.bio')\r",
									"    .and.to.have.jsonBody('user.image')\r",
									"    .and.to.have.jsonBody('user.token')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{localEmail}}\",\r\n    \"password\": \"{{passwordConduitLocal}}\",\r\n    \"username\": \"{{Cyrillic}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}users",
							"host": [
								"{{url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Password field without Uppercase letter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();\r",
									"\r",
									"pm.test(\"test all responce key\", function () {\r",
									"    pm.response.to.have.jsonBody('errors.body[0]')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{localEmail}}\",\r\n    \"password\": \"{{passwordLowercase}}\",\r\n    \"username\": \"{{localUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}users",
							"host": [
								"{{url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Password  field without at least one number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();\r",
									"\r",
									"pm.test(\"test all responce key\", function () {\r",
									"    pm.response.to.have.jsonBody('errors.body[0]')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{localEmail}}\",\r\n    \"password\": \"{{passwordNotNumber}}\",\r\n    \"username\": \"{{localUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}users",
							"host": [
								"{{url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Password  field without at least one lowercase letter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();\r",
									"\r",
									"pm.test(\"test all responce key\", function () {\r",
									"    pm.response.to.have.jsonBody('errors.body[0]')\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{localEmail}}\",\r\n    \"password\": \"{{passwordUppercase}}\",\r\n    \"username\": \"{{localUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}users",
							"host": [
								"{{url}}users"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"localEmail\", pm.variables.replaceIn('cat12{{$randomAbbreviation}}{{$randomEmail}}').toLowerCase());",
							"",
							"pm.environment.set(\"localUser\", pm.variables.replaceIn('{{$randomWord}}{{$randomAbbreviation}}').toLowerCase());",
							"",
							"pm.environment.set(\"longTextRegistration\", pm.variables.replaceIn('dddddddddddddddddddddddddddddddddddddddddddddddddds'));",
							"",
							"pm.environment.set(\"SpecialSymbols\", pm.variables.replaceIn('#$%^'));",
							"",
							"pm.environment.set(\"ShortPassword\", pm.variables.replaceIn('D1nmdhf'));",
							"",
							"pm.environment.set(\"Cyrillic\", pm.variables.replaceIn('ваыВВаывы'));",
							"",
							"pm.environment.set(\"passwordLowercase\", pm.variables.replaceIn('{{$randomPassword}}').toLowerCase());",
							"",
							"pm.environment.set(\"passwordNotNumber\", pm.variables.replaceIn('{{$randomWord}}'));",
							"",
							"pm.environment.set(\"passwordUppercase\", pm.variables.replaceIn('{{$randomPassword}}').toUpperCase());",
							"",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "User login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests)();\r",
									"\r",
									"pm.test(\"Response has keys\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.user).to.have.all.keys('id', 'username', 'email', 'bio', 'image', 'token');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user\": {\r\n        \"email\": \"{{localEmail}}\",\r\n        \"password\": \"{{passwordConduitLocal}}\"\r\n    }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}users/login",
							"host": [
								"{{url}}users"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Not registered Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();\r",
									"\r",
									"pm.test(\"test all responce key\", function () {\r",
									"    pm.response.to.have.jsonBody('errors.body[0]')\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user\": {\r\n        \"email\": \"{{$randomEmail}}\",\r\n        \"password\": \"{{passwordConduitLocal}}\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}users/login",
							"host": [
								"{{url}}users"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Password field is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();\r",
									"\r",
									"pm.test(\"test all responce key\", function () {\r",
									"    pm.response.to.have.jsonBody('errors.body[0]')\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user\": {\r\n        \"email\": \"{{localEmail}}\",\r\n        \"password\": \"\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}users/login",
							"host": [
								"{{url}}users"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Email field is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();\r",
									"\r",
									"pm.test(\"test all responce key\", function () {\r",
									"    pm.response.to.have.jsonBody('errors.body[0]')\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user\": {\r\n        \"email\": \"\",\r\n        \"password\": \"{{passwordConduitLocal}}\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}users/login",
							"host": [
								"{{url}}users"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(environment.registration)();",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Update settings",
			"item": [
				{
					"name": "Successful update settings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests)();\r",
									"\r",
									"pm.test(\"Response has keys\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.user).to.have.all.keys('id', 'username', 'email', 'bio', 'image', 'token');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{localUserId}}\",\r\n    \"username\": \"{{localUser}}\",\r\n    \"email\": \"{{localEmail}}\",\r\n    \"bio\": \"{{$randomWord}}\",\r\n    \"image\": \"{{localImage}}\",\r\n    \"token\": \"{{token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user",
							"host": [
								"{{url}}user"
							]
						}
					},
					"response": []
				},
				{
					"name": "'URL of profile picture' field is empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();\r",
									"\r",
									"pm.test(\"test all responce key\", function () {\r",
									"    pm.response.to.have.jsonBody('errors.body[0]')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{localUserId}}\",\r\n    \"username\": \"{{localUser}}\",\r\n    \"email\": \"{{localEmail}}\",\r\n    \"bio\": \"{{$randomWord}}\",\r\n    \"image\": \"\",\r\n    \"token\": \"{{token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user",
							"host": [
								"{{url}}user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Username field is empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();\r",
									"\r",
									"pm.test(\"test all responce key\", function () {\r",
									"    pm.response.to.have.jsonBody('errors.body[0]')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{localUserId}}\",\r\n    \"username\": \"\",\r\n    \"email\": \"{{localEmail}}\",\r\n    \"bio\": \"{{$randomWord}}\",\r\n    \"image\": \"{{localImage}}\",\r\n    \"token\": \"{{token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user",
							"host": [
								"{{url}}user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Email field is empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();\r",
									"\r",
									"pm.test(\"test all responce key\", function () {\r",
									"    pm.response.to.have.jsonBody('errors.body[0]')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{localUserId}}\",\r\n    \"username\": \"{{localUser}}\",\r\n    \"email\": \"\",\r\n    \"bio\": \"{{$randomWord}}\",\r\n    \"image\": \"{{localImage}}\",\r\n    \"token\": \"{{token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user",
							"host": [
								"{{url}}user"
							]
						}
					},
					"response": []
				},
				{
					"name": "URL of profile picture contain only spaces",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();\r",
									"\r",
									"pm.test(\"Response has keys\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.user).to.have.all.keys('id', 'username', 'email', 'bio', 'image', 'token');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{localUserId}}\",\r\n    \"username\": \"{{localUser}}\",\r\n    \"email\": \"{{localEmail}}\",\r\n    \"bio\": \"{{$randomWord}}\",\r\n    \"image\": \"     \",\r\n    \"token\": \"{{token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user",
							"host": [
								"{{url}}user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Your username contain only spaces",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();\r",
									"\r",
									"pm.test(\"Response has keys\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.user).to.have.all.keys('id', 'username', 'email', 'bio', 'image', 'token');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{localUserId}}\",\r\n    \"username\": \"      \",\r\n    \"email\": \"{{localEmail}}\",\r\n    \"bio\": \"{{$randomWord}}\",\r\n    \"image\": \"{{localImage}}\",\r\n    \"token\": \"{{token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user",
							"host": [
								"{{url}}user"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(environment.registration)();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Article",
			"item": [
				{
					"name": "Create new article",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests)();\r",
									"\r",
									"eval(environment.deleteArticle)();\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "drash_sess={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"article\": {\r\n        \"body\": \"{{articleBody}}\",\r\n        \"description\": \"{{articleDescription}}\",\r\n        \"title\": \"{{articleTitle}}\",\r\n        \"tags\": \"{{articleTags}}\",\r\n        \"author_id\": \"{{localUserId}}\"\r\n    }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}articles",
							"host": [
								"{{url}}articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit article",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){\r",
									"    eval(environment.сreateArticle)()\r",
									"}, 600);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests)();\r",
									"\r",
									"eval(environment.deleteArticle)();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "drash_sess= {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"article\": \r\n    {\r\n        \"id\": \"{{localId}}\", \r\n        \"author_id\": \"{{$randomInt}}\", \r\n        \"title\": \"{{articleTitle}}\", \r\n        \"description\": \"{{articleDescription}}\", \r\n        \"favorited\": false\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}articles",
							"host": [
								"{{url}}articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Article title is empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "drash_sess= {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"article\": {\r\n        \"body\": \"{{articleBody}}\",\r\n        \"description\": \"{{articleDescription}}\",\r\n        \"tags\": \"{{{{articleTags}}}}\",\r\n        \"author_id\": \"{{localUserId}}\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}articles",
							"host": [
								"{{url}}articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Article title is too long",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "drash_sess= {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"article\": {\r\n        \"body\": \"{{articleBody}}\",\r\n        \"description\": \"{{articleDescription}}\",\r\n        \"title\": \"{{longText}}\",\r\n        \"tags\": \"{{articleTags}}\",\r\n        \"author_id\": \"{{$randomInt}}\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}articles",
							"host": [
								"{{url}}articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Description is too long",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "drash_sess= {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"article\": {\r\n        \"body\": \"{{articleBody}}\",\r\n        \"description\": \"{{longText}}\",\r\n        \"title\": \"{{articleTitle}}\",\r\n        \"tags\": \"{{articleTags}}\",\r\n        \"author_id\": \"{{$randomInt}}\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}articles",
							"host": [
								"{{url}}articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Body is too long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "drash_sess= {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"article\": {\r\n        \"body\": \"{{longText}}\",\r\n        \"description\": \"{{articleDescription}}\",\r\n        \"title\": \"{{articleTitle}}\",\r\n        \"tags\": \"{{articleTags}}\",\r\n        \"author_id\": \"{{$randomInt}}\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}articles",
							"host": [
								"{{url}}articles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete article",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){\r",
									"    eval(environment.сreateArticle)()\r",
									"}, 600);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests)();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "drash_sess={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"article\": {\r\n        \"body\": \"{{longBody}}\",\r\n        \"description\": \"{{articleDescription}}\",\r\n        \"title\": \"{{articleTitle}}\",\r\n        \"tags\": \"{{articleTags}}\",\r\n        \"author_id\": \"{{$randomInt}}\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}articles/{{localSlug}}",
							"host": [
								"{{url}}articles"
							],
							"path": [
								"{{localSlug}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(environment.registration)();",
							"",
							"pm.environment.set(\"articleBody\", pm.variables.replaceIn('df{{$randomWord}}fp'));",
							"",
							"pm.environment.set(\"articleDescription\", pm.variables.replaceIn('e{{$randomWord}}jqmer'));",
							"",
							"pm.environment.set(\"articleTitle\", pm.variables.replaceIn('opq{{$randomWord}}vwi'));",
							"",
							"pm.environment.set(\"articleTags\", pm.variables.replaceIn('bel{{$randomWord}}xz'));",
							"",
							"pm.environment.set(\"longText\", pm.variables.replaceIn('dfasdfsadfasdfasdfsdfsdfsdfsdfsddfasdfsadfasdfasdfsdfsdfsdfsdfsddfasdfsadfasdfasdfsdfsdfsdfsdfsddfasdfsadfasdfasdfsdfsdfsdfsdfsddfasdfsadfasdfasdfsdfsdfsdfsdfsddfasdfsadfasdfasdfsdfsdfsdfsdfsddfasdfsadfasdfasdfsdfsdfsdfsdfsddfasdfsadfasdfasdfsghfghhgghghhe'));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Comment",
			"item": [
				{
					"name": "Create comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests)();\r",
									"\r",
									"eval(environment.deleteComment)();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "drash_sess={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"comment\": \"{{$randomWord}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}articles/{{localSlug}}/comments",
							"host": [
								"{{url}}articles"
							],
							"path": [
								"{{localSlug}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Body is empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "drash_sess={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"comment\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}articles/{{localSlug}}/comments",
							"host": [
								"{{url}}articles"
							],
							"path": [
								"{{localSlug}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Body is too long",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "drash_sess={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"comment\": \"{{longText}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}articles/{{localSlug}}/comments",
							"host": [
								"{{url}}articles"
							],
							"path": [
								"{{localSlug}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Body has only spaces",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests422)();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "drash_sess={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"comment\": \"     \"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}articles/{{localSlug}}/comments",
							"host": [
								"{{url}}articles"
							],
							"path": [
								"{{localSlug}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"eval(environment.createComment)()"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests)();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "drash_sess={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}articles/comment/{{commentId}}",
							"host": [
								"{{url}}articles"
							],
							"path": [
								"comment",
								"{{commentId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(environment.registration)();",
							"setTimeout(function(){",
							"    eval(environment.сreateArticle)()",
							"}, 600);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Favorite",
			"item": [
				{
					"name": "Like",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests)();\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"eval(environment.registration)();\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "drash_sess={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"set\",\r\n    \"user_id\": \"{{localUserId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}articles/{{localSlug}}/favorite",
							"host": [
								"{{url}}articles"
							],
							"path": [
								"{{localSlug}}",
								"favorite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlike",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(globals.basicTests)();\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"eval(environment.registration)();\r",
									"setTimeout(function(){\r",
									"    eval(environment.like)()\r",
									"}, 600);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": \"\",\r\n    \"user_id\": \"{{localUserId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}articles/{{localSlug}}/favorite",
							"host": [
								"{{url}}articles"
							],
							"path": [
								"{{localSlug}}",
								"favorite"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"postman.setGlobalVariable(\"basicTests\", () => {",
					"    pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"    });",
					"",
					"    pm.test(\"Response time is less than 400ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(400);",
					"    });",
					"});",
					"",
					"postman.setGlobalVariable(\"basicTests204\", () => {",
					"    pm.test(\"Status code is 204\", function () {",
					"    pm.response.to.have.status(204);",
					"   });",
					"",
					"    pm.test(\"Response time is less than 400ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(400);",
					"    });",
					"});",
					"",
					"postman.setGlobalVariable(\"basicTests422\", () => {",
					"    pm.test(\"Status code is 422\", function () {",
					"    pm.response.to.have.status(422);",
					"   });",
					"",
					"    pm.test(\"Response time is less than 400ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(400);",
					"    });",
					"});",
					"",
					"// REGISTRATION",
					"",
					"postman.setEnvironmentVariable(\"registration\",()=>{",
					"  const url = pm.environment.get('url');",
					"  const passwordConduit = pm.environment.get('passwordConduitLocal');",
					"  const localUser = pm.variables.replaceIn('dfs{{$randomWord}}df');",
					"  const localEmail = pm.variables.replaceIn('dfr{{$randomEmail}}').toLowerCase();",
					"  ",
					"",
					"  const registrationRequest = {",
					"  url: url + 'users',",
					"  method: 'POST',",
					"  header: {",
					"    'Content-Type': 'application/json',",
					"  },",
					"  body: {",
					"    mode: 'raw',",
					"    raw: JSON.stringify({    ",
					"        \"email\": localEmail,",
					"        \"password\": passwordConduit,",
					"        \"username\": localUser",
					"    })",
					"  }",
					"};",
					"",
					"pm.sendRequest(registrationRequest, (error, response) => {",
					"    console.log(error ? error : response.json());",
					"    pm.environment.set(\"localEmail\", response.json().user.email)",
					"    pm.environment.set(\"token\", response.json().user.token)",
					"    pm.environment.set(\"localUserId\", response.json().user.id)",
					"    pm.environment.set(\"localImage\", response.json().user.image)",
					"});",
					"})",
					"",
					"// CREATE ARTICLE",
					"",
					"postman.setEnvironmentVariable(\"сreateArticle\",()=>{",
					"  const url = pm.environment.get('url');",
					"  const token = pm.environment.get('token');",
					"  const articleAuthorId = pm.environment.get('localUserId');",
					"  const articleBody = pm.variables.replaceIn('obc{{$randomLoremWord}}dd');",
					"  const articleDescription = pm.variables.replaceIn('{{$randomLoremWord}}');",
					"  const articleTitle = pm.variables.replaceIn('ev{{$randomLoremWord}}lq');",
					"  const articleTags = pm.variables.replaceIn('s{{$randomLoremWord}}fd');",
					"",
					"  const createArticleRequest = {",
					"  url: url + 'articles',",
					"  method: 'POST',",
					"  header: {",
					"    'Content-Type': 'application/json',",
					"    'Cookie': 'drash_sess=' + token,",
					"  },",
					"  body: {",
					"    mode: 'raw',",
					"    raw: JSON.stringify({  ",
					"        \"article\": {",
					"            \"body\": articleBody,",
					"            \"description\": articleDescription,",
					"            \"title\": articleTitle,",
					"            \"tags\": articleTags,",
					"            \"author_id\": articleAuthorId",
					"        }  ",
					"    })",
					"  }",
					"};",
					"",
					"pm.sendRequest(createArticleRequest, (error, response) => {",
					"    console.log(error ? error : response.json());",
					"    pm.environment.set(\"localId\", response.json().article.id)",
					"    pm.environment.set(\"articleAuthorId\", response.json().article.author_id)",
					"    pm.environment.set(\"localSlug\", response.json().article.slug)",
					"});",
					"})",
					"",
					"// DELETE ARTICLE",
					"",
					"postman.setEnvironmentVariable(\"deleteArticle\",()=>{",
					"    const url = pm.environment.get('url');",
					"    const slug = pm.environment.get('localSlug');",
					"    const token = pm.environment.get('token');",
					"",
					"    const deleteArticle = {",
					"  url: url + 'articles' + '/' + slug,",
					"  method: 'DELETE',",
					"  header: {",
					"    'Content-Type': 'application/json',",
					"    'Cookie': 'drash_sess=' + token,",
					"  },",
					"  body: {",
					"    mode: 'none',",
					"  }",
					"};",
					"pm.sendRequest(deleteArticle, (error, response) => {",
					"     console.log(error ? error : response.json());",
					"});",
					"})",
					"",
					"// CREATE COMMENT",
					"",
					"postman.setEnvironmentVariable(\"createComment\",()=>{",
					"  const url = pm.environment.get('url');",
					"  const slug = pm.environment.get('localSlug');",
					"  const token = pm.environment.get('token');",
					"  const comment = pm.variables.replaceIn('qpc4{{$randomWord}}d7g');",
					"  ",
					"",
					"  const createCommentRequest = {",
					"  url: url + 'articles' + '/' + slug + '/' + 'comments', ",
					"  method: 'POST',",
					"  header: {",
					"    'Content-Type': 'application/json',",
					"    'Cookie': 'drash_sess=' + token,",
					"  },",
					"  body: {",
					"    mode: 'raw',",
					"    raw: JSON.stringify({  ",
					"            \"comment\": comment",
					"    })",
					"  }",
					"};",
					"",
					"pm.sendRequest(createCommentRequest, (error, response) => {",
					"    console.log(error ? error : response.json());",
					"    pm.environment.set(\"commentId\", response.json().data.id)",
					"    ",
					"});",
					"})",
					"",
					"// DELETE COMMENT",
					"",
					"postman.setEnvironmentVariable(\"deleteComment\",()=>{",
					"    const url = pm.environment.get('url');",
					"    const commentId = pm.environment.get('commentId');",
					"    const token = pm.environment.get('token');",
					"",
					"    const deleteCommentRequest = {",
					"  url: url + 'articles' + '/' + 'comment' + '/' + commentId,",
					"  method: 'DELETE',",
					"  header: {",
					"    'Content-Type': 'application/json',",
					"    'Cookie': 'drash_sess=' + token,",
					"  },",
					"  body: {",
					"    mode: 'none',",
					"  }",
					"};",
					"pm.sendRequest(deleteCommentRequest, (error, response) => {",
					"     console.log(error ? error : response.json());",
					"});",
					"})",
					"",
					"// MAKE LIKE",
					"",
					"postman.setEnvironmentVariable(\"like\",()=>{",
					"  const url = pm.environment.get('url');",
					"  const slug = pm.environment.get('localSlug');",
					"  const token = pm.environment.get('token');",
					"  const userId = pm.environment.get('localUserId');",
					"  ",
					"",
					"  const likeRequest = {",
					"  url: url + 'articles' + '/' + slug + '/' + 'favorite', ",
					"  method: 'POST',",
					"  header: {",
					"    'Content-Type': 'application/json',",
					"    'Cookie': 'drash_sess=' + token,",
					"  },",
					"  body: {",
					"    mode: 'raw',",
					"    raw: JSON.stringify({  ",
					"            \"action\": \"set\",",
					"            \"user_id\": userId",
					"    })",
					"  }",
					"};",
					"",
					"pm.sendRequest(likeRequest, (error, response) => {",
					"    console.log(error ? error : response.json());",
					"});",
					"})"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}